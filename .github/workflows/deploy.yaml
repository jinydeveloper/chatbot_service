name: Deploy Streamlit App to EC2

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run tests (optional)
      run: |
        # pytest tests/ --verbose
        echo "Tests would run here"
        
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: ${{ secrets.EC2_SSH_PORT }}
        script: |
          # 프로젝트 디렉토리로 이동
          cd /home/ubuntu/chatbot_service || exit 1
          
          # Git repository 업데이트
          git pull origin main
          
          # 가상환경 활성화 (있는 경우)
          source venv/bin/activate || echo "Virtual environment not found"
          
          # 의존성 업데이트
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            echo "requirements.txt not found, installing basic packages"
            pip install streamlit pandas numpy
          fi
          
          # 기존 Streamlit 프로세스 종료
          pkill -f "streamlit run" || echo "No existing streamlit process found"
          
          # Streamlit 앱 백그라운드에서 실행
          nohup streamlit run app.py --server.port=8501 --server.address=0.0.0.0 > streamlit.log 2>&1 &
          
          # 프로세스가 정상적으로 시작되었는지 확인
          sleep 5
          if pgrep -f "streamlit run" > /dev/null; then
            echo "Streamlit app deployed successfully"
          else
            echo "Failed to start Streamlit app"
            exit 1
          fi

  notify:
    needs: deploy
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "🚀 Deployment successful!"
        else
          echo "❌ Deployment failed!"
        fi