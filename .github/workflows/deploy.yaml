name: Deploy Streamlit App to Private EC2

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
        
    - name: Install dependencies (CI validation only)
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Deploy to Private EC2 Instances
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: ${{ secrets.EC2_SSH_PORT }}
        script: |
          # Private EC2 접근을 위한 키 설정
          echo "${{ secrets.EC2_SSH_KEY }}" > /tmp/private_key.pem
          chmod 600 /tmp/private_key.pem
          
          # Bastion Host에서 Git 업데이트 먼저 수행
          echo "=== Bastion Host에서 최신 코드 가져오기 ==="
          cd /home/ubuntu/chatbot_service || exit 1
          git pull origin main
          echo "Bastion Host 코드 업데이트 완료"
          
          # 서버 목록 정의
          SERVERS=(
            "${{ secrets.PRIVATE_EC2_HOST }}:Private-EC2-Main"
            "${{ secrets.PRIVATE_EC2_SUB_HOST_1 }}:Private-EC2-Sub"
          )
          
          # 배포 함수 정의
          deploy_to_server() {
            local SERVER_INFO=$1
            local SERVER_IP=$(echo $SERVER_INFO | cut -d':' -f1)
            local SERVER_NAME=$(echo $SERVER_INFO | cut -d':' -f2)
            
            echo "=== $SERVER_NAME ($SERVER_IP) 배포 시작 ==="
            
            # 1단계: 코드 동기화
            echo "[$SERVER_NAME] 코드 동기화 중..."
            rsync -avz --delete -e "ssh -i /tmp/private_key.pem -o StrictHostKeyChecking=no" \
              /home/ubuntu/chatbot_service/ ubuntu@$SERVER_IP:/home/ubuntu/chatbot_service/
            
            if [ $? -ne 0 ]; then
              echo "[$SERVER_NAME] 코드 동기화 실패"
              return 1
            fi
            
            # 2단계: 배포 작업 수행
            ssh -i /tmp/private_key.pem -o StrictHostKeyChecking=no ubuntu@$SERVER_IP <<EOF
              set -e
              
              mkdir -p /home/ubuntu/chatbot_service/.streamlit

              # secrets.toml 파일 작성
              cat <<EOT | tee /home/ubuntu/chatbot_service/.streamlit/secrets.toml > /dev/null
              [aws]
              AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
              AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
              AWS_DEFAULT_REGION=${{ secrets.AWS_DEFAULT_REGION }}
              EOT

              # Python 3 설치 확인 및 venv 생성
              if ! command -v python3 &> /dev/null; then
                echo "Python 3 설치 중..."
                sudo apt update
                sudo apt install -y software-properties-common
                sudo add-apt-repository -y ppa:deadsnakes/ppa
                sudo apt update
                sudo apt install -y python3 python3-venv python3-pip
              fi
              
              if [ ! -d venv ]; then
                python3 -m venv venv
              fi
              source venv/bin/activate
              
              pip install --upgrade pip
              pip install -r requirements.txt
              
              # 의존성 설치 확인
              echo "설치된 패키지 확인:"
              pip list | grep -E "streamlit|boto3|botocore"

              sudo systemctl daemon-reload
              sudo systemctl restart streamlit.service

              sleep 5
              if systemctl is-active --quiet streamlit.service; then
                echo "$SERVER_NAME 배포 성공"
                exit 0
              else
                echo "$SERVER_NAME 배포 실패"
                sudo journalctl -u streamlit.service --no-pager -n 20
                exit 1
              fi
            EOF
            
            local DEPLOY_RESULT=$?
            echo "=== $SERVER_NAME 배포 완료 (결과: $DEPLOY_RESULT) ==="
            return $DEPLOY_RESULT
          }
          
          # 병렬 배포 실행
          declare -a PIDS
          declare -a RESULTS
          
          for i in "${!SERVERS[@]}"; do
            deploy_to_server "${SERVERS[$i]}" &
            PIDS[$i]=$!
          done
          
          # 모든 배포 프로세스 대기
          OVERALL_SUCCESS=true
          for i in "${!PIDS[@]}"; do
            wait ${PIDS[$i]}
            RESULTS[$i]=$?
            if [ ${RESULTS[$i]} -ne 0 ]; then
              OVERALL_SUCCESS=false
              echo "서버 ${i}번 배포 실패"
            fi
          done
          
          # 임시 파일 정리
          rm -f /tmp/private_key.pem
          
          # 최종 결과 확인
          if [ "$OVERALL_SUCCESS" = true ]; then
            echo ">>> 모든 서버 배포 성공!"
            exit 0
          else
            echo ">>> 일부 서버 배포 실패!"
            exit 1
          fi

  notify:
    needs: deploy
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "모든 Private EC2 서버 배포 성공!"
        else
          echo "Private EC2 서버 배포 실패!"
          exit 1
        fi